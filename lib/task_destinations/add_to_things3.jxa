#!/usr/bin/env osascript -l JavaScript
/*
  Copyright 2009, David Martinez

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
const VERBOSE = false

function run(input, params) {
	'use strict';

	var strPath = input[0]
	if (VERBOSE) { 	console.log("Path:"+strPath) }
	var nsjira_report = $.NSString.stringWithContentsOfFileEncodingError(strPath,$.NSUTF8StringEncoding,null)
	var jira_report = ObjC.unwrap(nsjira_report)
	var report_json = JSON.parse(jira_report)

	var completed_stati = report_json['completed_stati']
	if (VERBOSE) { console.log("Completed stati:"+completed_stati) }
  var app_params     = report_json['task_app_params']
	var target_area = app_params['project_name']
  var tag_names      = app_params['tags']

	var TaskApp = Application("Things3")
	TaskApp.includeStandardAdditions = true
	if (VERBOSE) { 	console.log("Setting target project: "+target_area) }
	var things_area = TaskApp.areas.byName(target_area)
	things_area.name() // To force an exception that we can see.
	if (VERBOSE) { console.log("Setting target project: "+things_area.name()) }

	var things_projects = TaskApp.projects

	for (var i = report_json['results'].length - 1; i >= 0; i--) {
		var row = report_json['results'][i]
		var project_name = row['task_name']
		var project_notes = row['task_notes']
		var project_status = row['status']
		if (VERBOSE) { console.log("Task: "+project_name) }
		var things_project = things_projects.byName(project_name)
		try {
			var things_name = things_project.name()
			if (VERBOSE) { console.log("Found task: and it's " + things_project.status() + ". Setting status to " + project_status) }
			if (completed_stati.indexOf(project_status) > 0) {
				if (VERBOSE) { console.log("Marking Done") }
                things_project.status = 'completed'
			}
			things_project.notes = project_notes
		} catch (err) {
			if (VERBOSE) { console.log("No task Found. "+err.message+". Adding it..") }
			var project = TaskApp.Project({
        name: project_name,
        notes: project_notes,
        area: things_area,
        status: ( completed_stati.indexOf(project_status) > 0 ? 'completed' : 'open' )
      })
			if (VERBOSE) { console.log("New TaskApp project:"+project) }
			TaskApp.projects.push(project)
			// Add default checklist
			var implementTodo = TaskApp.ToDo({
				name: 'Implementation',
        project: project,
        status: ( completed_stati.indexOf(project_status) > 0 ? 'completed' : 'open' )
			})
			var codeReviewTodo = TaskApp.ToDo({
				name: 'Code Review',
        project: project,
        status: ( completed_stati.indexOf(project_status) > 0 ? 'completed' : 'open' )
			})
			var onQaTodo = TaskApp.ToDo({
				name: 'Deploy to QA',
        project: project,
        status: ( completed_stati.indexOf(project_status) > 0 ? 'completed' : 'open' )
			})
			var passedQaTodo = TaskApp.ToDo({
				name: 'Passed QA',
        project: project,
        status: ( completed_stati.indexOf(project_status) > 0 ? 'completed' : 'open' )
			})
			var shippedTodo = TaskApp.ToDo({
				name: 'Released',
        project: project,
        status: ( completed_stati.indexOf(project_status) > 0 ? 'completed' : 'open' )
			})
			TaskApp.toDos.push(implementTodo)
			TaskApp.toDos.push(codeReviewTodo)
			TaskApp.toDos.push(onQaTodo)
			TaskApp.toDos.push(passedQaTodo)
			TaskApp.toDos.push(shippedTodo)
			// Not found, keep going.
		}
	}
	console.log("Finished updating "+report_json['results'].length+" tasks in Things.")
}
